"""Affine subnet deterministic evaluation toolkit."""

from .config import Settings, settings
from .core import (
    Block,
    BlockHeader,
    Challenge,
    DuelResult,
    Sample,
    Verdict,
    canonical_bytes,
    canonical_timestamp,
    derive_challenge_id,
    hash_bytes,
    hash_hex,
    make_rng,
    merkle_root,
)
from .duel import (
    RatioSchedule,
    beats_target,
    duel_env,
    duel_many_envs,
    loses_to_target,
    wilson_interval,
)
from .envs import (
    AffineEnv,
    ENV_REGISTRY,
    Mult8Env,
    TicTacToeEnv,
    ensure_last_integer,
    env_names,
    get_env,
    last_integer,
)
from .network import ChutesClient, ChutesResponse
from .storage import BucketStorage, StorageError, get_storage
from .validators import (
    ChallengeCommitment,
    ChallengeOutcome,
    DuplicateDetector,
    MinerOutcome,
    ValidatorSampler,
    VerifiedSample,
    block_hash,
    build_block,
    compute_vtrust,
    decide_group,
    load_block,
    scoreboard,
    serialize_block,
    set_weights,
    verify_block,
    verify_chain,
    verify_samples,
    winner_takes_all,
)

__all__ = [
    "AffineEnv",
    "Block",
    "BlockHeader",
    "Challenge",
    "ChallengeCommitment",
    "ChallengeOutcome",
    "ChutesClient",
    "ChutesResponse",
    "DuplicateDetector",
    "DuelResult",
    "ENV_REGISTRY",
    "Mult8Env",
    "RatioSchedule",
    "Sample",
    "Settings",
    "TicTacToeEnv",
    "Verdict",
    "beats_target",
    "block_hash",
    "build_block",
    "BucketStorage",
    "canonical_bytes",
    "canonical_timestamp",
    "compute_vtrust",
    "decide_group",
    "derive_challenge_id",
    "duel_env",
    "duel_many_envs",
    "env_names",
    "ensure_last_integer",
    "get_env",
    "hash_bytes",
    "hash_hex",
    "get_storage",
    "loses_to_target",
    "last_integer",
    "load_block",
    "make_rng",
    "merkle_root",
    "MinerOutcome",
    "scoreboard",
    "serialize_block",
    "set_weights",
    "settings",
    "StorageError",
    "ValidatorSampler",
    "VerifiedSample",
    "verify_block",
    "verify_chain",
    "verify_samples",
    "winner_takes_all",
    "wilson_interval",
]
